Troubleshooting
This guide will help you solve common issues you might encounter when using the CLI and the Constatic Base framework.
Initial Checklist
Before proceeding, please ensure you meet the following requirements:
Node.js v20.11 or higher installed (or Bun).
Basic knowledge of programming logic.
Basic knowledge of JavaScript and TypeScript.
Basic knowledge of the discord.js library.
If you are encountering any of the errors listed below, review the corresponding solutions.
ENOENT: no such file or directory, lstat "C:\Users\...\AppData\Roaming\npm"
This error occurs when you try to run the CLI with npx constatic on Windows, and Node.js cannot find the npm folder in its expected location.
Solution:
The solution is straightforward: you just need to create the missing folder. The error message itself shows you the expected path: C:\Users\YOUR_USERNAME\AppData\Roaming\npm.
Navigate to your user's Roaming folder. The easiest way to do this is by pressing Win + R to open the Run dialog, typing %appdata%, and clicking OK.
Once the directory opens, create a new folder named npm.
The issue should now be resolved.
"Execution of scripts is disabled on this system"
This PowerShell error occurs when you try to run a script (like npx) and the system's execution policy prevents it.
Solution:
You need to change the execution policy for your current user.
Open the Start Menu, search for PowerShell, and run it.
Execute the following command in the PowerShell terminal:
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
Use code with caution.
Powershell
Restart the terminal you were using to run the CLI and try the command again.
Slash Commands (/) Not Appearing on the Server
You've started the project, the terminal shows that the commands were successfully registered, but they don't appear when you try to use them on your Discord server.
Solution:
This is usually a caching issue on the Discord client. Simply restart your client to force it to fetch the new commands.
Desktop: Press CTRL + R (or CMD + R on Mac) to reload the app.
Mobile: Fully close the app and reopen it.
You can verify that the commands were registered correctly by going to Server Settings > Integrations, and selecting your bot's application. You should see all the commands listed there.
Note: This caching delay typically happens when commands are registered globally. If you choose to register commands on a per-guild basis during development, they usually update instantly.
Used disallowed intents
If you receive this error in your terminal right after starting your application, it means you have not enabled the necessary Privileged Gateway Intents in the Discord Developer Portal.
Solution:
Go to the Discord Developer Portal and select your application.
Navigate to the Bot tab in the left-hand menu.
Scroll down to the Privileged Gateway Intents section.
Enable the intents your bot requires (e.g., PRESENCE INTENT, SERVER MEMBERS INTENT).
Save your changes and restart your bot.
Cannot find module
This error occurs when an import or require statement cannot find the specified module. There are two common causes:
External or Node Modules (e.g., discord.js, chalk, node:fs)
If the error message mentions a library name, you have likely either misspelled the name or forgotten to install it as a dependency.
Solution: Run npm install <package_name> to install the missing package.
Local Modules (e.g., ./commands/ping.js, ../../utils/helpers.js)
If the error message displays a file path, you have likely specified the path incorrectly in your import statement.
Solution: Check the path carefully. Remember that imports for local files must be relative paths (starting with ./ or ../) or configured path aliases (often starting with #/ or @/). A "bare" import like functions/math.js is invalid and should be written as ./functions/math.js.
